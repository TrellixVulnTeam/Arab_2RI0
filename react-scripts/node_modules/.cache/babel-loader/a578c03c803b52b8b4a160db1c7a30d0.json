{"ast":null,"code":"/* eslint no-case-declarations: \"off\" */\nimport global from 'global';\nexport default function jarallaxElement() {\n  var jarallax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : global.jarallax;\n\n  if ('undefined' === typeof jarallax) {\n    return;\n  }\n\n  var Jarallax = jarallax.constructor; // redefine default methods\n\n  ['initImg', 'canInitParallax', 'init', 'destroy', 'clipContainer', 'coverImage', 'isVisible', 'onScroll', 'onResize'].forEach(function (key) {\n    var def = Jarallax.prototype[key];\n\n    Jarallax.prototype[key] = function () {\n      var self = this;\n\n      if ('initImg' === key && null !== self.$item.getAttribute('data-jarallax-element')) {\n        self.options.type = 'element';\n        self.pureOptions.speed = self.$item.getAttribute('data-jarallax-element') || self.pureOptions.speed;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if ('element' !== self.options.type) {\n        return def.apply(self, args);\n      }\n\n      self.pureOptions.threshold = self.$item.getAttribute('data-threshold') || '';\n\n      switch (key) {\n        case 'init':\n          var speedArr = self.pureOptions.speed.split(' ');\n          self.options.speed = self.pureOptions.speed || 0;\n          self.options.speedY = speedArr[0] ? parseFloat(speedArr[0]) : 0;\n          self.options.speedX = speedArr[1] ? parseFloat(speedArr[1]) : 0;\n          var thresholdArr = self.pureOptions.threshold.split(' ');\n          self.options.thresholdY = thresholdArr[0] ? parseFloat(thresholdArr[0]) : null;\n          self.options.thresholdX = thresholdArr[1] ? parseFloat(thresholdArr[1]) : null;\n          def.apply(self, args); // restore background image if available.\n\n          var originalStylesTag = self.$item.getAttribute('data-jarallax-original-styles');\n\n          if (originalStylesTag) {\n            self.$item.setAttribute('style', originalStylesTag);\n          }\n\n          return true;\n\n        case 'onResize':\n          var defTransform = self.css(self.$item, 'transform');\n          self.css(self.$item, {\n            transform: ''\n          });\n          var rect = self.$item.getBoundingClientRect();\n          self.itemData = {\n            width: rect.width,\n            height: rect.height,\n            y: rect.top + self.getWindowData().y,\n            x: rect.left\n          };\n          self.css(self.$item, {\n            transform: defTransform\n          });\n          break;\n\n        case 'onScroll':\n          var wnd = self.getWindowData();\n          var centerPercent = (wnd.y + wnd.height / 2 - self.itemData.y - self.itemData.height / 2) / (wnd.height / 2);\n          var moveY = centerPercent * self.options.speedY;\n          var moveX = centerPercent * self.options.speedX;\n          var my = moveY;\n          var mx = moveX;\n          if (null !== self.options.thresholdY && moveY > self.options.thresholdY) my = 0;\n          if (null !== self.options.thresholdX && moveX > self.options.thresholdX) mx = 0;\n          self.css(self.$item, {\n            transform: \"translate3d(\".concat(mx, \"px,\").concat(my, \"px,0)\")\n          });\n          break;\n\n        case 'initImg':\n        case 'isVisible':\n        case 'clipContainer':\n        case 'coverImage':\n          return true;\n        // no default\n      }\n\n      return def.apply(self, args);\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}